import streamlit as st
import pandas as pd
import altair as alt

@st.cache_data
def load_data(file_path):
    """Load CSV data into a pandas DataFrame."""
    return pd.read_csv(file_path)

df = load_data('data/data.csv')

def intro():
    st.write("# ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ üëã")

    st.markdown(
        """
        ‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
    """
    )

def analyze_1():
    st.markdown(f'# {list(page_names_to_funcs.keys())[1]}')
    st.write(
        """
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à
"""
    )
    purchase_type_counts = df['‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î'].value_counts().reset_index()
    purchase_type_counts.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
    total_count = purchase_type_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'].sum()
    purchase_type_counts['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)'] = (purchase_type_counts['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'] / total_count) * 100

    # Create a bar chart with Altair
    base_chart = alt.Chart(purchase_type_counts).mark_bar().encode(
        x=alt.X('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠', axis=alt.Axis(title='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠', labelAngle=0)),
        y=alt.Y('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', axis=alt.Axis(title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')),
        tooltip=['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (%)']
    ).properties(
        width=600,
        height=400
    )

    # Add text labels on the bars
    text = base_chart.mark_text(
        align='center',
        baseline='bottom',
        dy=-10  # Nudges text to be above the bars
    ).encode(
        text='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:Q'
    )

    # Combine the bar chart and text layers
    layered_chart = alt.layer(base_chart, text).configure_axis(
        labelFontSize=12,
        titleFontSize=14
    )

    st.altair_chart(layered_chart)

def analyze_2():
    st.markdown(f'# {list(page_names_to_funcs.keys())[1]}')
    st.write(
        """
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏ß‡∏à
"""
    )
    df = load_data('data/processed_data.csv')
    df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤'] = df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤'].map({0: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå', 1: '‡∏°‡∏µ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå'})
    df['‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î'] = df['‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î'].map({0: '‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏á', 1: '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏ß‡∏î'})

    # Pivot the DataFrame to have 'Purchase Type' as columns
    pivot_df = df.pivot_table(index='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', columns='‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î', values='‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô / ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç  *', aggfunc='sum').reset_index()

    # Melt the pivot table to long format for Altair
    melted_df = pivot_df.melt(id_vars='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', var_name='‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î', value_name='‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô')

    # Create the Altair chart
    bar_chart = alt.Chart(melted_df).mark_bar().encode(
        x=alt.X('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:N', axis=alt.Axis(title='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', labelAngle=0)),
        y=alt.Y('sum(‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô):Q', title='‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô'),
        color='‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î:N',
        tooltip=['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î', alt.Tooltip('sum(‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô):Q', format='.2f')]
    ).properties(
        width=600,
        height=400,
        title='‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô'
    )

    # Add text labels to the bars
    text = bar_chart.mark_text(
        align='center',
        baseline='middle',
        dy=-10  # Adjust the position of the text
    ).encode(
        text=alt.Text('sum(‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô):Q', format='.2f')
    )

    # Combine the bar chart and text layers
    layered_chart = (bar_chart + text).configure_axis(
        labelFontSize=12,
        titleFontSize=14
    ).configure_title(
        fontSize=16
    )

    # Calculate average quantity sold per day for each purchase type and group
    average_sales = df.groupby(['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î'])['‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô / ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç  *'].mean().reset_index()
    average_sales.columns = ['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏£‡∏±‡∏õ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏î', 'Average']

    # Display the chart in Streamlit
    st.altair_chart(layered_chart, use_container_width=True)

    # Display average sales as a table
    st.write("Average quantity sold per day for each purchase type and group:")
    st.table(average_sales)

page_names_to_funcs = {
    "‡∏ö‡∏ó‡∏ô‡∏≥": intro,
    "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà 1": analyze_1,
    "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà 2": analyze_2
}

demo_name = st.sidebar.radio("Choose a demo", page_names_to_funcs.keys())
page_names_to_funcs[demo_name]()

